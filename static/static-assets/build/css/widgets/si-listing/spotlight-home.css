.waf-spotlight-home{background:#f1f1f1;margin:0 -10px;-webkit-border-radius:5px;-moz-border-radius:5px;-ms-border-radius:5px;border-radius:5px}.waf-spotlight-home .head-tab,.waf-spotlight-home .more-btn{display:none}.waf-spotlight-home .layout-wrapper{padding:0 10px}.waf-spotlight-home .article-list{display:-moz-box;display:-ms-flexbox;display:-webkit-flex;display:flex;-webkit-align-items:center;-moz-align-items:center;-ms-align-items:center;align-items:center;margin:0 -10px;overflow:auto}.waf-spotlight-home .article-item{width:200px;flex-shrink:0}.waf-spotlight-home .article-wrap{position:relative}.waf-spotlight-home .article-content{padding:10px;position:absolute;bottom:0;left:0;width:100%;z-index:1}.waf-spotlight-home .article-title{color:#fff}.waf-spotlight-home .article-thumbnail .item-type-icon{display:block;width:21px;height:21px;border:none;background:rgba(0,43,97,0.6) 0% 0% no-repeat padding-box;border-radius:5px;position:absolute;top:5%;transform:translate(-50%, -50%);left:93%;font-family:"Hero-Bold",sans-serif;font-size:14px;line-height:21px;text-align:center}.waf-spotlight-home .article-thumbnail .item-type-icon:before{display:none}.waf-spotlight-home .article-thumbnail a:before{content:"";background:transparent linear-gradient(180deg, rgba(26,61,135,0) 0%, #0B2C5D 100%) 0% 0% no-repeat padding-box;position:absolute;left:0;right:0;width:100%;height:100%;bottom:0;z-index:1;-webkit-border-radius:5px;-moz-border-radius:5px;-ms-border-radius:5px;border-radius:5px}@media screen and (min-width: 767px){.waf-spotlight-home{margin:0}.waf-spotlight-home .layout-wrapper{padding:0 15px}.waf-spotlight-home .article-item{width:calc(100% / 5)}}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
